geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Read Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")  # Красивые цвета
print(plt)
ggsave("./pictures/barplot_alldataset_no_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300,  bg = "white")
anno_long <- anno %>%
rowwise() %>%
mutate(across(-Sample.name.s., ~ . / sum(c_across(-Sample.name.s.)))) %>%
ungroup() %>%
pivot_longer(cols = -Sample.name.s., names_to = "RNA_Type", values_to = "Proportion")
plt <- ggplot(anno_long, aes(x = Sample.name.s., y = Proportion, fill = RNA_Type)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
plt
ggsave("./pictures/barplot_alldataset_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
coldata$condition <- relevel(coldata$condition, ref = "before")
modelMatrix <- model.matrix(~type*condition + patient, data = coldata)
modelMatrix
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = coldata,
design = ~type*condition + patient)
dds$condition <- relevel(dds$condition, ref = "before")
dds
dim(dds)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dim(dds)
dds <- DESeq(dds, fitType = "parametric")
dds
plotDispEsts(dds)
dds <- DESeq(dds, fitType = "local")
dds
plotDispEsts(dds)
dds <- DESeq(dds, fitType = "parametric")
dds
plotDispEsts(dds)
rowSums(counts(dds_150) >= 10)
library(tidyverse)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(clusterProfiler)
library(biomaRt)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(GenomicRanges)
library(msigdbr)
library(multiMiR)
library(miRBaseConverter)
library(enrichplot)
library(vsn)
library(rvest)
library(patchwork)
library(dbplyr)
setwd("/Users/dariakilina/GitHub/Micro-RNA_cardiology")
coldata <- read_tsv("data/phenotableV.tsv", show_col_types = FALSE)
coldata$type <- as.factor(coldata$type)
coldata$patient <- as.factor(coldata$patient)
coldata$condition <- as.factor(coldata$condition)
coldata <- as.data.frame(coldata)
rownames(coldata) <- coldata$sample
coldata
counts <- read.csv("data/miR.Counts.csv", header = TRUE, sep = ",")
counts <- column_to_rownames(counts, var = "miRNA")
#counts <- round(counts) # если используем нормализованные данные
head(counts)
colnames(counts) <- gsub("^X", "", colnames(counts))
common_samples <- intersect(colnames(counts), coldata$sample)
counts <- counts[, c(counts$miRNA, common_samples)]
counts <- counts[, rownames(coldata)] #ранжирую по колонки в counts так же как и названия строк в coldata
head(counts)
anno <- read.csv("data/annotation.report.csv", header = TRUE, sep = ",")
anno$Sample.name.s. <- gsub("-", ".", anno$Sample.name.s.)
anno <- anno[, -c(2:5, 7, 15)]
common_samples <- intersect(anno$Sample.name.s., coldata$sample)
anno <- anno[anno$Sample.name.s. %in% common_samples, ]
anno <- anno[match(rownames(coldata), anno$Sample.name.s.), ] #ранжирую по колонки в counts так же как и названия строк в coldata
anno
anno_long <- anno %>%
pivot_longer(cols = -Sample.name.s., names_to = "RNA_Type", values_to = "Count")
plt <- ggplot(anno_long, aes(x = Sample.name.s., y = Count, fill = RNA_Type)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Read Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")  # Красивые цвета
print(plt)
ggsave("./pictures/barplot_alldataset_no_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300,  bg = "white")
anno_long <- anno %>%
rowwise() %>%
mutate(across(-Sample.name.s., ~ . / sum(c_across(-Sample.name.s.)))) %>%
ungroup() %>%
pivot_longer(cols = -Sample.name.s., names_to = "RNA_Type", values_to = "Proportion")
plt <- ggplot(anno_long, aes(x = Sample.name.s., y = Proportion, fill = RNA_Type)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
plt
ggsave("./pictures/barplot_alldataset_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
coldata$condition <- relevel(coldata$condition, ref = "before")
modelMatrix <- model.matrix(~type*condition + patient, data = coldata)
modelMatrix
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = coldata,
design = ~type*condition + patient)
dds$condition <- relevel(dds$condition, ref = "before")
dds
dim(dds)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dim(dds)
dds <- DESeq(dds, fitType = "parametric")
dds
plotDispEsts(dds)
raw_counts <- counts(dds, normalized = FALSE)
normalized_counts <- counts(dds, normalized = TRUE)
df <- data.frame(
Sample = rep(colnames(dds), 2),
Counts = c(colSums(raw_counts), colSums(normalized_counts)),
Type = rep(c("Raw", "Normalized"), each = ncol(dds))
)
plt <- ggplot(df, aes(x = Sample, y = Counts, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Counts before and after normalization", x = "Sample", y = "Total Counts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plt
ggsave("./pictures/Counts before and after normalization.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
rlt <- rlog(dds)  #rlog Transformation
meanSdPlot(assay(rlt))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
meanSdPlot(assay(vsd)) #показывает, как изменяется стандартное отклонение в зависимости от среднего значения экспрессии
pcaData <- plotPCA(rlt, intgroup=c("condition", "type", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$condition_type <- paste(pcaData$condition, pcaData$type, sep = "_")
ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
ggtitle("PCA plot for all dataset before removing donor effect")+
scale_color_brewer(palette = "Set2")
assay(rlt) <- limma::removeBatchEffect(assay(rlt),
batch = colData(dds)[,'patient'])
pcaData <- plotPCA(rlt, intgroup=c("condition", "type", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$condition_type <- paste(pcaData$condition, pcaData$type, sep = "_")
plt <- ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
scale_color_brewer(palette = "Set2")
plt
ggsave("./pictures/PCA plot for all dataset after removing donor effect.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:50]
df <- as.data.frame(colData(dds)[,c("type", "condition")])
plt <- pheatmap(assay(rlt)[select,],
cluster_rows = TRUE,
show_rownames = TRUE,
cluster_cols = TRUE,
annotation_col = df,
fontsize_row = 6)
plt
ggsave("./pictures/Plot a heatmap of 50 most expressed genes.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
sampleDists <- dist(t(assay(rlt)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rlt$condition, rlt$type, sep="_type")
colnames(sampleDistMatrix) <- paste(rlt$condition, rlt$type, sep="_type")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")) )(255)
plt <- pheatmap(sampleDistMatrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = colors)
plt
ggsave("./pictures/Plot of the distance between samples heatmap.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
coldata_150 <- coldata[coldata$type == 150, ]
rownames(coldata_150) <- coldata_150$sample
coldata_150
common_samples_150 <- intersect(colnames(counts), coldata_150$samples)
counts_150 <- counts[, c(counts$miRNA, common_samples)]
counts_150 <- counts_150[, rownames(coldata_150)] #ранжирую по колонки в counts так же как и названия строк в coldata_150
head(counts_150)
coldata_150$condition <- relevel(factor(coldata_150$condition), ref = "before")
modelMatrix <- model.matrix(~ 0 + patient + condition , coldata)
modelMatrix
dds_150 <- DESeqDataSetFromMatrix(countData = counts_150,
colData = coldata_150,
design = ~ 0 + patient + condition)
dds_150$condition <- relevel(dds_150$condition, ref = "before")
dds_150
rowSums(counts(dds_150) >= 10)
counts(dds_150) >= 10
View(counts)
View(coldata_150)
View(counts_150)
plotCounts(dds_150, gene=which.max(res_150$log2FoldChange), intgroup="condition")
library(tidyverse)
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(clusterProfiler)
library(biomaRt)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(GenomicRanges)
library(msigdbr)
library(multiMiR)
library(miRBaseConverter)
library(enrichplot)
library(vsn)
library(rvest)
library(patchwork)
library(dbplyr)
setwd("/Users/dariakilina/GitHub/Micro-RNA_cardiology")
coldata <- read_tsv("data/phenotableV.tsv", show_col_types = FALSE)
coldata$type <- as.factor(coldata$type)
coldata$patient <- as.factor(coldata$patient)
coldata$condition <- as.factor(coldata$condition)
coldata <- as.data.frame(coldata)
rownames(coldata) <- coldata$sample
coldata
counts <- read.csv("data/miR.Counts.csv", header = TRUE, sep = ",")
counts <- column_to_rownames(counts, var = "miRNA")
#counts <- round(counts) # если используем нормализованные данные
head(counts)
colnames(counts) <- gsub("^X", "", colnames(counts))
common_samples <- intersect(colnames(counts), coldata$sample)
counts <- counts[, c(counts$miRNA, common_samples)]
counts <- counts[, rownames(coldata)] #ранжирую по колонки в counts так же как и названия строк в coldata
head(counts)
anno <- read.csv("data/annotation.report.csv", header = TRUE, sep = ",")
anno$Sample.name.s. <- gsub("-", ".", anno$Sample.name.s.)
anno <- anno[, -c(2:5, 7, 15)]
common_samples <- intersect(anno$Sample.name.s., coldata$sample)
anno <- anno[anno$Sample.name.s. %in% common_samples, ]
anno <- anno[match(rownames(coldata), anno$Sample.name.s.), ] #ранжирую по колонки в counts так же как и названия строк в coldata
anno
anno_long <- anno %>%
pivot_longer(cols = -Sample.name.s., names_to = "RNA_Type", values_to = "Count")
plt <- ggplot(anno_long, aes(x = Sample.name.s., y = Count, fill = RNA_Type)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Read Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")  # Красивые цвета
print(plt)
ggsave("./pictures/barplot_alldataset_no_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300,  bg = "white")
anno_long <- anno %>%
rowwise() %>%
mutate(across(-Sample.name.s., ~ . / sum(c_across(-Sample.name.s.)))) %>%
ungroup() %>%
pivot_longer(cols = -Sample.name.s., names_to = "RNA_Type", values_to = "Proportion")
plt <- ggplot(anno_long, aes(x = Sample.name.s., y = Proportion, fill = RNA_Type)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Sample", y = "Proportion") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
plt
ggsave("./pictures/barplot_alldataset_normalised.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
coldata$condition <- relevel(coldata$condition, ref = "before")
modelMatrix <- model.matrix(~type*condition + patient, data = coldata)
modelMatrix
dds <- DESeqDataSetFromMatrix(countData = counts,
colData = coldata,
design = ~type*condition + patient)
dds$condition <- relevel(dds$condition, ref = "before")
dds
dim(dds)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
dim(dds)
dds <- DESeq(dds, fitType = "parametric")
dds
plotDispEsts(dds)
raw_counts <- counts(dds, normalized = FALSE)
normalized_counts <- counts(dds, normalized = TRUE)
df <- data.frame(
Sample = rep(colnames(dds), 2),
Counts = c(colSums(raw_counts), colSums(normalized_counts)),
Type = rep(c("Raw", "Normalized"), each = ncol(dds))
)
plt <- ggplot(df, aes(x = Sample, y = Counts, fill = Type)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Counts before and after normalization", x = "Sample", y = "Total Counts") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plt
ggsave("./pictures/Counts before and after normalization.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
rlt <- rlog(dds)  #rlog Transformation
meanSdPlot(assay(rlt))
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
meanSdPlot(assay(vsd)) #показывает, как изменяется стандартное отклонение в зависимости от среднего значения экспрессии
pcaData <- plotPCA(rlt, intgroup=c("condition", "type", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$condition_type <- paste(pcaData$condition, pcaData$type, sep = "_")
ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
ggtitle("PCA plot for all dataset before removing donor effect")+
scale_color_brewer(palette = "Set2")
assay(rlt) <- limma::removeBatchEffect(assay(rlt),
batch = colData(dds)[,'patient'])
pcaData <- plotPCA(rlt, intgroup=c("condition", "type", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$condition_type <- paste(pcaData$condition, pcaData$type, sep = "_")
plt <- ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
scale_color_brewer(palette = "Set2")
plt
ggsave("./pictures/PCA plot for all dataset after removing donor effect.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:50]
df <- as.data.frame(colData(dds)[,c("type", "condition")])
plt <- pheatmap(assay(rlt)[select,],
cluster_rows = TRUE,
show_rownames = TRUE,
cluster_cols = TRUE,
annotation_col = df,
fontsize_row = 6)
plt
ggsave("./pictures/Plot a heatmap of 50 most expressed genes.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
sampleDists <- dist(t(assay(rlt)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rlt$condition, rlt$type, sep="_type")
colnames(sampleDistMatrix) <- paste(rlt$condition, rlt$type, sep="_type")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")) )(255)
plt <- pheatmap(sampleDistMatrix,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = colors)
plt
ggsave("./pictures/Plot of the distance between samples heatmap.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
coldata_150 <- coldata[coldata$type == 150, ]
rownames(coldata_150) <- coldata_150$sample
coldata_150
common_samples_150 <- intersect(colnames(counts), coldata_150$samples)
counts_150 <- counts[, c(counts$miRNA, common_samples)]
counts_150 <- counts_150[, rownames(coldata_150)] #ранжирую по колонки в counts так же как и названия строк в coldata_150
head(counts_150)
coldata_150$condition <- relevel(factor(coldata_150$condition), ref = "before")
modelMatrix <- model.matrix(~ 0 + patient + condition , coldata)
modelMatrix
dds_150 <- DESeqDataSetFromMatrix(countData = counts_150,
colData = coldata_150,
design = ~ 0 + patient + condition)
dds_150$condition <- relevel(dds_150$condition, ref = "before")
dds_150
dim(dds_150)
smallestGroupSize <- 3
keep <- rowSums(counts(dds_150) >= 10) >= smallestGroupSize
dds_150 <- dds_150[keep,]
dim(dds_150)
dds_150 <- DESeq(dds_150, fitType = "parametric")
plotDispEsts(dds_150)
res_150 <- results(dds_150, contrast=c("condition", "before", "after"))
res_150
tiff("./pictures/PlotMA_standart_padj_0.05_type150.tiff",
width = 8, height = 6, units = "in", res = 300, bg = "white")
plotMA(res_150, alpha = 0.05, ylim = c(-8, 8))
dev.off()
plotMA(res_150, alpha = 0.05, ylim = c(-8, 8))
res_df <- res_150 %>%
as.data.frame() %>%
mutate(color = case_when(
padj < 0.05  ~ "padj < 0.05",
pvalue < 0.05  ~ "pvalue < 0.05",
TRUE ~ "All micro-RNA"
))
plt <- ggplot(res_df, aes(x = baseMean, y = log2FoldChange, color = color)) +
geom_point(alpha = 0.7, size = 1) +
geom_hline(yintercept = 0, linetype = "solid", color = "gray40", size = 1.5) +
scale_color_manual(values = c("All micro-RNA" = "gray70",
"pvalue < 0.05" = "blue",
"padj < 0.05" = "red")) +
scale_x_log10(labels = scales::scientific) +
theme_minimal() +
labs(x = "mean of normalized counts",
y = "log fold change",
color = NULL)  # Название легенды
plt
ggsave("./pictures/Сustom MAplot_type150.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
signres_150 <- results(dds_150, contrast=c("condition", "before", "after"), alpha=0.05)
summary(signres_150)
order_indices <- order(-res_150$log2FoldChange)
res_150[order_indices, ]
plotCounts(dds_150, gene=which.max(res_150$log2FoldChange), intgroup="condition")
plotCounts(dds_150, gene=which.min(res_150$padj), intgroup="condition")
plotCounts(dds, gene=rownames(res)[which.min(res$padj[which.max(res$log2FoldChange)])], intgroup="condition")
#plotCounts(dds_150, gene=which.max(res_150$log2FoldChange), intgroup="condition")
plotCounts(dds_150, gene=which.min(res_150$padj), intgroup="condition")
#plotCounts(dds, gene=rownames(res)[which.min(res$padj[which.max(res$log2FoldChange)])], intgroup="condition")
plt <- EnhancedVolcano(res_150,
lab = rownames(res_150),
x = "log2FoldChange",
y = "padj",
pCutoff = 0.05,
FCcutoff = 1,
labSize = 3.0,
boxedLabels = FALSE,
col = c('black', '#CBD5E8', '#B3E2CD', '#FDCDAC'),
colAlpha = 1,
title = NULL,
subtitle = NULL)
plt
ggsave("./pictures/Volcano plot_150type.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
rlt_150 <- rlog(dds_150)
meanSdPlot(assay(rlt_150))  #показывает, как изменяется стандартное отклонение в зависимости от среднего значения экспрессии.
pcaData <- plotPCA(rlt_150, intgroup=c("condition", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
scale_color_brewer(palette = "Set2")
assay(rlt_150) <- limma::removeBatchEffect(assay(rlt_150),
batch = colData(dds_150)[,'patient'])
pcaData <- plotPCA(rlt_150, intgroup=c("condition", "patient"), returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
plt <- ggplot(pcaData, aes(PC1, PC2, shape = patient, color = condition)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "%")) +
ylab(paste0("PC2: ", percentVar[2], "%")) +
coord_fixed() +
theme_bw() +
scale_color_brewer(palette = "Set2")
plt
ggsave("./pictures/PCA plot for type 150 after removing donor effect.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
res_sign_150 <- subset(res_150, padj < 0.05 & !is.na(padj) & abs(log2FoldChange) > 1.0)
res_sign_150 <- res_sign_150[order(res_sign_150$log2FoldChange, decreasing = TRUE), ]
sig_genes <- rownames(res_sign_150)  # Получаем имена генов, которые прошли фильтрацию
de_mat <- assay(rlt_150)[sig_genes, ]
datamatrix <- t(scale(t(de_mat)))
annotation_col <- data.frame(condition = coldata_150$condition)
rownames(annotation_col) <- colnames(datamatrix)
annotation_colors <- list(
condition = c("before" = "#FFCC00", "after" = "#3399FF")
)
plt <- pheatmap(datamatrix,
cluster_rows = TRUE,
show_rownames = TRUE,
cluster_cols = TRUE,
annotation_col = annotation_col,
annotation_colors = annotation_colors,
display_numbers = TRUE,
legend = FALSE,
fontsize = 15)
plt
ggsave("./pictures/Heatmap of diff expressed genes_type150.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
sampleDists_150 <- dist(t(assay(rlt_150)))
sampleDistMatrix_150 <- as.matrix(sampleDists_150)
rownames(sampleDistMatrix_150) <- paste(rlt_150$condition, rlt_150$patient, sep="_patient")
colnames(sampleDistMatrix_150) <- paste(rlt_150$condition, rlt_150$patient, sep="_patient")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")) )(255)
plt <- pheatmap(sampleDistMatrix_150,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
fontsize = 12,
legend = FALSE,
display_numbers = TRUE,
color = colors)
plt
ggsave("./pictures/Plot of the distance between samples_type150.tiff", plot = plt, width = 8, height = 6, dpi = 300, bg = "white")
up_150 <- res_sign_150 %>%
as.data.frame() %>%
filter(log2FoldChange > 0)
down_150 <- res_sign_150 %>%
as.data.frame() %>%
filter(log2FoldChange < 0)
rownames(up_150)
rownames(down_150)
#msig_go_bp <- msigdbr(species = "Homo sapiens", category = "C5", subcategory = "GO:BP")
# targets_down <- readLines("targets_down150_list.txt")
# targets_up <- readLines("targets_up150_list.txt")
GO_enrich_down150_bp <- enrichGO(
gene          = targets150_down,
OrgDb         = org.Hs.eg.db,
keyType       = "SYMBOL",
ont           = "CC",
pAdjustMethod = "BH",
qvalueCutoff  = 0.05
)
mirna_names_up <- c("hsa-miR-328-3p")
mirna_names_down <- c("hsa-miR-133a-3p", "hsa-miR-133a-3p", "hsa-miR-208a-3p", "hsa-miR-499a-5p")
converted_mirna_up <- miRNAVersionConvert(mirna_names_up)
converted_mirna_down <- miRNAVersionConvert(mirna_names_down)
converted_mirna_up
converted_mirna_down
targets150_down <- unique(get_multimir(org = "hsa", mirna = converted_mirna_up$Accession, table = "validated")@data$target_symbol)
